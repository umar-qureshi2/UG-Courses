var ga_toolbar_type = 'engine';var ga_time = new Date().getTime();		var TYPE_COMPONENT = 'component';var TYPE_GADGET = 'gadget';function ga_init(type){    // Insert GA Footer    getGaScript();    if(ga.type == 'toolbar'){        return;    }    if (type == TYPE_COMPONENT) {        ga_sendStats();    } else {        ga_sendStats();    }}function getGaScript(){    if(!(BrowserDetect.OS == 'Mac'&& BrowserDetect.browser == 'Chrome')){        var node = document.getElementsByTagName('body')[0];        first = node.lastChild;         newNode = document.createElement('script');        newNode.type = 'text/javascript';         newNode.async = true;        newNode.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';        node.insertBefore(newNode, first);    }	}function ga_sendEvent(options) {    if( !(BrowserDetect.OS == 'Mac'&& BrowserDetect.browser == 'Chrome') ){		        if (!options.category){            options.category = ga.appname;        }        if (!options.label){            if (options.host){                options.label = ga_toolbar_type;	            }			        }        if (!options.value){            if (options.time){                options.value = ga_getEventTime();	            }			        }        _gaq.push(['_trackEvent', options.category, options.action, options.label, options.value]);    }}function ga_sendStats(){    var type = 'Undefined';    var ver = '';        try {        ver = GetVersion();        type = GetInfo().context.host;    } catch (e) {}        if (ver != '') {        _gaq.push(['_setCustomVar', 1, 'appcontainer', type, 1]);        _gaq.push(['_trackPageview']);    }}function ga_getEventTime(){    var cur = new Date().getTime();    var rez = Number(cur) - Number(ga_time);    return Math.ceil(rez / 1000);}function isSet(obj) {    return (obj != null && typeof(obj) != undefined);}function isEmpty(obj) {    if(!isSet(obj)) {        return true;    }    return (obj == '') ? true : false;}function ga_sendActivity(appName, prefix) {    try {        var tore = GetInfo().context.host;        var lifetimeSent = RetrieveGlobalKey(prefix + '_LifetimeSent');        if(isEmpty(lifetimeSent)) {            _gaq.push(['_trackPageview','/virtual/app/' + appName + '/install/'+tore]);            StoreGlobalKey(prefix + '_LifetimeSent', "TRUE");        }        var dailyActivity = RetrieveGlobalKey(prefix + '_DailyActivity');        if(isEmpty(dailyActivity)) {            dailyActivity = 0;        } else {            dailyActivity = dailyActivity * 1;        }           var ctime = (new Date()).getTime();        if (ctime>(dailyActivity+24*60*60*1000)) {            _gaq.push(['_trackPageview','/virtual/app/' + appName + '/active/'+tore]);            StoreGlobalKey(prefix + '_DailyActivity', "" + ctime);        }     } catch (e) {}}function appContainer(){	      var type = 'Undefined';    var ver = '';        try {        ver = GetVersion();        type = GetInfo().context.host;    } catch (e) {}        if (ver != '') {        _gaq.push(['_setCustomVar', 1, 'appcontainer', type, 1]);        _gaq.push(['_trackPageview']);    }}function sendEvent(appName, keyName){    try{        _gaq.push(['_trackPageview','/virtual/app/' + appName + '/' +keyName]);    } catch(e){}}function sendActivity_appContainer(appName, prefix){/*appContainer();	ga_sendActivity(appName, prefix);*/}var ga_usage = {    name: null,    _getCompId: function(){        try{            return (navigator.userAgent.indexOf('MSIE') != -1) ? (GetInfo().appId).toString() : (GetInfo().componentId).toString();        }catch(e){            try{                return (document.location.host).toString();            }catch(r){                try{                    return JSON.stringify(GetInfo());                }catch(q){                    return null;                }            }        }    },    _needSend: function(key){        try{            var first = RetrieveGlobalKey(key);            if(first == null || first == ''){                return true;            }else{                first = new Date(Number(first));                var now = new Date();                if(first.getDate() != now.getDate() || first.getMonth() != now.getMonth() || first.getFullYear() != now.getFullYear()){                    return true;                }else{                    return false;                }            }        }catch(e){            return false;        }    },    _sendActivity: function(action){        try{            var _this = this,            key = this._getKeyName(action);            setTimeout(function(){                if(_this._needSend(key)){                    ga_sendEvent({                        action: action                    });                    StoreGlobalKey(key, (new Date().getTime()).toString());                }            }, _this._activityRandom());        }catch(e){        }    },     _activityRandom: function(){        return Math.round(Math.random()*10000);    },    _getKeyName: function(action){        return this.name + '_' + action;    },    send: function(action, name){        try{            if(!action) return;                        name = name || this._getCompId();            this.name = this.name || name;                        if(this.name == null) return;                        this._sendActivity(action);        }catch(e){        }    }}