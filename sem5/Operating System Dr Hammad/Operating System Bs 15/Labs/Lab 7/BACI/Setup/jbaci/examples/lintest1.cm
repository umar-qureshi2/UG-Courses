/* Test of Linda primitives */
/* Follow instructions carefully! */
/* Start by stepping p1 */
/* Comments describe observable results */

void p1() {
  char c; 
  int i1, i2; 
  /* Step process p1 until **** */

  /* Check post-, read- and remove-note */
  postnote('m', 10, 20);		/* Posts note */
  readnote('m', i1, i2);
  cout << i1 << ' ' << i2 << '\n';	/* Prints 10 20 */
  removenote('m', i1, i2);
  cout << i1 << ' ' << i2 << '\n';	/* Prints 10 20 */

  /* Check different size notes */
  postnote('a');			/* Posts note */
  readnote('a');
  readnote('a', i1, i2);  		/* (OK, parameters are not counted) */
  cout << i1 << ' ' << i2 << '\n';	/* Prints -32767 -32767 */
  removenote('a');			/* Removes note ('a') */
  postnote('b', 7);			/* Posts note */
  removenote('b', i1);			/* Removes note ('b',7) */
  cout << i1 << '\n';			/* Prints 7 */
  
  /* Check values vs. variables */
  
  postnote('c', 1, 2);			/* Posts note */
  c = 'd'; i1 = 8; i2 = 9;
  postnote(c, i1, i2);			/* Posts note */
  readnote('c', i1, i2);
  cout << i1 << ' ' << i2 << '\n';	/* Prints 1 2 */
  readnote(c, i1, i2);
  cout << i1 << ' ' << i2 << '\n';	/* Prints 8 9 */
  removenote('c', i1, i2);		/* Removes note ('c',1,2) */
  cout << i1 << ' ' << i2 << '\n';	/* Prints 1 2 */
  removenote(c, i1, i2);		/* Removes note ('d',8,9) */
  cout << i1 << ' ' << i2 << '\n';	/* Prints 8 9 */
  
  /* Check blocking/unblocking */
  readnote('a', i1, i2);  		/* Blocks p1 */
  /* ****, step process p2 */

  /* Step p1 until ++++ */
  cout << i1 << ' ' << i2 << '\n';	/* Prints 77 88 */
  removenote('a', i1, i2);		/* Removes note ('a',77,88) */
  cout << i1 << ' ' << i2 << '\n';	/* Prints 77 88 */
  removenote('b', i1, i2);		/* Removes note ('b',55,66) */
  cout << i1 << ' ' << i2 << '\n';	/* Prints 55 66 */
}

void p2() {
  /* Step this instruction after p1 blocks */ 
  postnote('b', 55, 66); 	/* Posts note */
  /* Step p1 again to make sure that it blocks again */
  /* Step this instruction to unblock p1 */
  postnote('a', 77, 88);	/* Posts note */
}

void main() {
  cobegin { p1(); p2(); }
}

